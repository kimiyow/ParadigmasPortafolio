<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Kimiyow Blog </title>
    <link>http://localhost:1313/post/</link>
    <description>Recent content in Posts on Kimiyow Blog </description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 23 May 2025 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://localhost:1313/post/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Pr√°ctica 3</title>
      <link>http://localhost:1313/post/post4/</link>
      <pubDate>Fri, 23 May 2025 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/post/post4/</guid>
      <description>&lt;h1 id=&#34;pr√°ctica-3-introducci√≥n-a-haskell-y-proyecto-app-haskell&#34;&gt;&lt;strong&gt;Pr√°ctica #3: Introducci√≥n a Haskell y Proyecto App Haskell&lt;/strong&gt;&lt;/h1&gt;&#xA;&lt;h2 id=&#34;montes-solis-kimberly&#34;&gt;&lt;strong&gt;Montes Solis Kimberly&lt;/strong&gt;&lt;/h2&gt;&#xA;&lt;h2 id=&#34;--introducci√≥n&#34;&gt;&lt;strong&gt;‚îÄ‚îÄ .‚ú¶ Introducci√≥n&lt;/strong&gt;&lt;/h2&gt;&#xA;&lt;p&gt;En esta pr√°ctica se explorar√° el lenguaje de programaci√≥n &lt;strong&gt;Haskell&lt;/strong&gt;, su funcionamiento, caracter√≠sticas principales, herramientas b√°sicas y se realizar√° un breve an√°lisis del funcionamiento de una aplicaci√≥n tipo &lt;strong&gt;App Haskell&lt;/strong&gt; desarrollada en este lenguaje funcional.&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;·Øì-qu√©-es-haskell&#34;&gt;·Øì‚òÖ &lt;strong&gt;¬øQu√© es Haskell?&lt;/strong&gt;&lt;/h2&gt;&#xA;&lt;p&gt;&lt;strong&gt;Haskell&lt;/strong&gt; es un lenguaje de programaci√≥n &lt;strong&gt;funcional, puro y de tipado est√°tico&lt;/strong&gt;. Fue dise√±ado para manejar la programaci√≥n funcional de forma acad√©mica y profesional, promoviendo la claridad y correcci√≥n del c√≥digo.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Pr√°ctica 2</title>
      <link>http://localhost:1313/post/post3/</link>
      <pubDate>Fri, 16 May 2025 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/post/post3/</guid>
      <description>&lt;h1 id=&#34;pr√°ctica-2-programa-1-an√°lisis-programa-control-de-memoria&#34;&gt;&lt;strong&gt;Pr√°ctica #2, Programa 1: An√°lisis Programa Control de Memoria&lt;/strong&gt;&lt;/h1&gt;&#xA;&lt;h2 id=&#34;montes-solis-kimberly-376169&#34;&gt;&lt;strong&gt;Montes Solis Kimberly 376169&lt;/strong&gt;&lt;/h2&gt;&#xA;&lt;h2 id=&#34;--introducci√≥n&#34;&gt;&lt;strong&gt;‚îÄ‚îÄ .‚ú¶ Introducci√≥n&lt;/strong&gt;&lt;/h2&gt;&#xA;&lt;p&gt;En este reporte se analiza el funcionamiento de un m√≥dulo en Python dise√±ado para gestionar el uso de memoria. Se explica el prop√≥sito de cada componente del c√≥digo y su ejecuci√≥n.&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;·Øì-descripci√≥n-del-c√≥digo&#34;&gt;·Øì‚òÖ &lt;strong&gt;Descripci√≥n del C√≥digo&lt;/strong&gt;&lt;/h2&gt;&#xA;&lt;p&gt;El siguiente programa en Python define una clase para llevar el control de la memoria asignada y liberada en el mont√≥n (&lt;em&gt;heap&lt;/em&gt;).&lt;/p&gt;</description>
    </item>
    <item>
      <title>Pr√°ctica 0</title>
      <link>http://localhost:1313/post/post1/</link>
      <pubDate>Fri, 14 Mar 2025 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/post/post1/</guid>
      <description>&lt;h1 id=&#34;pr√°ctica-0-uso-de-repositorios-markdown&#34;&gt;&lt;strong&gt;Pr√°ctica #0: Uso de Repositorios Markdown&lt;/strong&gt;&lt;/h1&gt;&#xA;&lt;h2 id=&#34;montes-solis-kimberly&#34;&gt;&lt;strong&gt;Montes Solis Kimberly&lt;/strong&gt;&lt;/h2&gt;&#xA;&lt;h2 id=&#34;--introducci√≥n&#34;&gt;&lt;strong&gt;‚îÄ‚îÄ .‚ú¶ Introducci√≥n&lt;/strong&gt;&lt;/h2&gt;&#xA;&lt;p&gt;En este reporte se presentar√° la pr√°ctica realizada utilizando conceptos b√°sicos de &lt;strong&gt;Markdown&lt;/strong&gt; y &lt;strong&gt;Git&lt;/strong&gt;, explorando su aplicaci√≥n en la creaci√≥n y gesti√≥n de contenido de manera eficiente.&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;·Øì-qu√©-es-markdown&#34;&gt;·Øì‚òÖ &lt;strong&gt;¬øQu√© es Markdown?&lt;/strong&gt;&lt;/h2&gt;&#xA;&lt;p&gt;Markdown es un &lt;strong&gt;lenguaje de marcado ligero&lt;/strong&gt; que permite formatear texto de manera sencilla y r√°pida. Se usa principalmente para:&lt;/p&gt;&#xA;&lt;p&gt;‚ù§Ô∏é &lt;strong&gt;Documentaci√≥n&lt;/strong&gt; (README en GitHub)&lt;br&gt;&#xA;‚ù§Ô∏é &lt;strong&gt;Blogs y art√≠culos&lt;/strong&gt;&lt;br&gt;&#xA;‚ù§Ô∏é &lt;strong&gt;Toma de notas&lt;/strong&gt;&lt;br&gt;&#xA;‚ù§Ô∏é &lt;strong&gt;Formateo de texto en plataformas web&lt;/strong&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Pr√°ctica 1</title>
      <link>http://localhost:1313/post/post2/</link>
      <pubDate>Fri, 14 Mar 2025 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/post/post2/</guid>
      <description>&lt;h1 id=&#34;pr√°ctica-1-elementos-b√°sicos-de-los-lenguajes-de-programaci√≥n&#34;&gt;&lt;strong&gt;Pr√°ctica #1: Elementos B√°sicos de los Lenguajes de Programaci√≥n&lt;/strong&gt;&lt;/h1&gt;&#xA;&lt;h2 id=&#34;montes-solis-kimberly&#34;&gt;&lt;strong&gt;Montes Solis Kimberly&lt;/strong&gt;&lt;/h2&gt;&#xA;&lt;h2 id=&#34;-administraci√≥n-de-memoria-en-c&#34;&gt;‚ú¶ Administraci√≥n de Memoria en C&lt;/h2&gt;&#xA;&lt;hr&gt;&#xA;&lt;h3 id=&#34;ñ¶π-c√≥digo-1-definici√≥n-del-m√≥dulo-de-administraci√≥n-de-memoria&#34;&gt;ñ¶π &lt;strong&gt;C√≥digo #1: Definici√≥n del M√≥dulo de Administraci√≥n de Memoria&lt;/strong&gt;&lt;/h3&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#ifndef MEMORY_MANAGEMENT_H&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#define MEMORY_MANAGEMENT_H&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#ifndef MEMORY_MANAGEMENT_DISPLAY&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#define MEMORY_MANAGEMENT_DISPLAY 0&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#endif&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;extern&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; heap_allocations;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;extern&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; heap_deallocations;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;extern&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; stack_allocations;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;extern&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; stack_deallocations;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#if MEMORY_MANAGEMENT_DISPLAY&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;displayMemoryUsage&lt;/span&gt;();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;incrementHeapAllocations&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;pointer, &lt;span style=&#34;color:#66d9ef&#34;&gt;size_t&lt;/span&gt; size);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;incrementHeapDeallocations&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;pointer);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;incrementStackAllocations&lt;/span&gt;();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;incrementStackDeallocations&lt;/span&gt;();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#else&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#define displayMemoryUsage() ((void)0)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#define incrementHeapAllocations(pointer, size) ((void)0)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#define incrementHeapDeallocations(pointer) ((void)0)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#define incrementStackAllocations() ((void)0)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#define incrementStackDeallocations() ((void)0)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#endif&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#endif &lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// MEMORY_MANAGEMENT_H&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;hr&gt;&#xA;&lt;h3 id=&#34;-elementos-clave-del-c√≥digo&#34;&gt;‚ú¶ Elementos Clave del C√≥digo&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;Variables Globales&lt;/strong&gt;: &lt;code&gt;heap_allocations&lt;/code&gt;, &lt;code&gt;stack_allocations&lt;/code&gt; para rastrear el uso de memoria.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Macros Condicionales&lt;/strong&gt;: Controlan la visibilidad y ejecuci√≥n del c√≥digo.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Subprogramas&lt;/strong&gt;: Separan funciones seg√∫n prop√≥sito, favoreciendo la modularidad.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Tipos de Datos&lt;/strong&gt;: Uso de punteros (&lt;code&gt;void *&lt;/code&gt;) y &lt;code&gt;size_t&lt;/code&gt;.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;hr&gt;&#xA;&lt;h3 id=&#34;ñ¶π-c√≥digo-2-implementaci√≥n-de-la-l√≥gica-de-rastreo&#34;&gt;ñ¶π &lt;strong&gt;C√≥digo #2: Implementaci√≥n de la L√≥gica de Rastreo&lt;/strong&gt;&lt;/h3&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;#34;memory_management.h&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;stdlib.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; heap_allocations &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; heap_deallocations &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; stack_allocations &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; stack_deallocations &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;typedef&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; MemoryRecord {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;pointer;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;size_t&lt;/span&gt; size;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; MemoryRecord &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;next;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;} MemoryRecord;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;MemoryRecord &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;heap_memory_records &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; NULL;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;addMemoryRecord&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;pointer, &lt;span style=&#34;color:#66d9ef&#34;&gt;size_t&lt;/span&gt; size) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    MemoryRecord &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;record &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (MemoryRecord &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;)&lt;span style=&#34;color:#a6e22e&#34;&gt;malloc&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;sizeof&lt;/span&gt;(MemoryRecord));&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    record&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;pointer &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pointer;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    record&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;size &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; size;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    record&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;next &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; heap_memory_records;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    heap_memory_records &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; record;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;removeMemoryRecord&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;pointer) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    MemoryRecord &lt;span style=&#34;color:#f92672&#34;&gt;**&lt;/span&gt;current &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;heap_memory_records;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; (&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;current) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ((&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;current)&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;pointer &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; pointer) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            MemoryRecord &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;to_free &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;current;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;current &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;current)&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;next;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#a6e22e&#34;&gt;free&lt;/span&gt;(to_free);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        current &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;current)&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;next;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;hr&gt;&#xA;&lt;h3 id=&#34;-funciones-adicionales&#34;&gt;‚ú¶ Funciones Adicionales&lt;/h3&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#if MEMORY_MANAGEMENT_DISPLAY&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;displayMemoryUsage&lt;/span&gt;() {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// Muestra resumen y detalles de memoria&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;incrementHeapAllocations&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;pointer, &lt;span style=&#34;color:#66d9ef&#34;&gt;size_t&lt;/span&gt; size) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    heap_allocations&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;addMemoryRecord&lt;/span&gt;(pointer, size);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;incrementHeapDeallocations&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;pointer) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    heap_deallocations&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;removeMemoryRecord&lt;/span&gt;(pointer);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;incrementStackAllocations&lt;/span&gt;() {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    stack_allocations&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;incrementStackDeallocations&lt;/span&gt;() {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    stack_deallocations&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#endif&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;hr&gt;&#xA;&lt;h3 id=&#34;-puntos-clave&#34;&gt;‚ú¶ Puntos Clave&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;Gesti√≥n del Heap&lt;/strong&gt;: Registra asignaciones y liberaciones con listas enlazadas.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Visualizaci√≥n de Uso&lt;/strong&gt;: Condicional al macro &lt;code&gt;MEMORY_MANAGEMENT_DISPLAY&lt;/code&gt;.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Estructura&lt;/strong&gt;: Modular y flexible para integrar en proyectos grandes.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Control de Secuencia&lt;/strong&gt;: Mediante &lt;code&gt;#if&lt;/code&gt; y estructuras iterativas como &lt;code&gt;while&lt;/code&gt;.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;hr&gt;&#xA;&lt;h3 id=&#34;-conclusi√≥n&#34;&gt;‚ãÜ‚ü° &lt;strong&gt;Conclusi√≥n&lt;/strong&gt;&lt;/h3&gt;&#xA;&lt;p&gt;Este m√≥dulo en C muestra un manejo detallado del uso de memoria, destacando el uso de estructuras, punteros, macros y funciones condicionales. Es una herramienta eficaz para monitorear recursos en sistemas complejos.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
